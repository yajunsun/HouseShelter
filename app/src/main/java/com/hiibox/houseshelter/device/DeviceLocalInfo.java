//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : DeviceLocalInfo.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.hiibox.houseshelter.device;

import java.nio.ByteBuffer;

/**
 * 设备局域网信息类
 * 
 * @author guo
 * 
 */
public class DeviceLocalInfo implements Cloneable
{
	private int nCmd; // 标识命令字
	private byte szPacketFlag[]; // 标识字符
	private byte szDeviceName[]; // 设备名称
	private byte szDeviceType[]; // 设备类型
	private int nMaxChannel; // 最大通道数
	private byte szDeviceIP[]; // 设备IP
	private byte szDeviceMasK[]; // 设备子网掩码
	private byte szDeviceGateWay[]; // 设备网关
	private byte szMultiAddr[]; // 设备多播地址
//	private byte szMacAddr[]; // 设备MAC 地址
	private byte szMacAddr_LAN[]; // 设备MAC 地址
	private byte szMacAddr_WIFI[]; // 设备MAC 地址
	private int nEnableDeviceDHCP; // 设备DHCP
	private byte szRevsered0[]; // reserved0
	private byte szDNS0[]; // 设备DNS地址
	private byte szDNS1[]; // DNS地址暂没用
	private int nMultiPort; // 多播端口
	private int nDataPort; // 数据端口
	private int nWebServerPort; // WEB 端口

	private byte szUserName[]; // 用户名
	private byte szPwd[]; // 密码
	private byte szCameraVer[]; // 软件版本

	private byte szWanServerIP[]; // 广域网IP
	private byte szServerPort[]; // 广域网端口
	private byte szCamSerial[]; // 设备序列号

	private int nEnableWiFiDHCP; // 是否允许WiFi的DHCP
	private int nEnableWiFi; // 是否允许WiFi
	private int nWiFiEncryMode; // WiFi加密模式
	private byte szWiFiIP[]; // WiFi的IP
	private byte szWiFiSSID[]; // WiFi名称
	private byte szWiFiPwd[]; // WiFi密码

	private byte szWiFiMasK[]; // WiFi的子网掩码
	private byte szWiFiGateWay[]; // WiFi的网关
	private byte szWiFiDNS0[]; // WiFi的DNS地址
	private byte szWiFiDNS1[]; //

	/*
	 * //char* pVideoSize[] = { bit 0 1 2 3 4 5 "H264:720P", "H264:D1",
	 * "H264:VGA", "H264:DCIF", "H264:CIF", "H264:QVGA", bit 6 7 8
	 * "H264:720P,H264:VGA", "H264:720P,H264:QVGA(320*240)",
	 * "H264:720P,H264:CIF(352*288)", bit 9 10 11 12
	 * "H264:D1(704*576),H264:DCIF", "H264:D1,H264:CIF", "H264:VGA,H264:QVGA",
	 * "H264:CIF,H264:QVGA" };
	 */
	private int uOfferSize; // 提供的视频分辨率
	private int uImageSize; // 当前视频分辨率
	private int uMirror; // 视频镜像
	private int uFlip; // 视频翻转
	private int uRequestStream;//
	private int uBitrate1; // 波特率
	private int uFramerate1; // 帧率
	// 第二路码流
	private int uBitrate2; // 波特率
	private int uFramerate2; // 帧率

	private int uImagesource; // 分辨率(NTSC/PAL) 0:NTSC, 1:PAL
	private int uChangePWD; // 1: need to change 0: not to change
	private byte szNewPwd[]; // the new password
	private int nDeviceNICType; // 0 wired NIC;1 wifi NIC
	private int uEnableAudio; // 是否开启音频

	private byte szRevsered1[];
	private byte nAlarmAudioPlay; // /< alarm audio play enable/disable
	private byte nAlarmDuration; // /< alarm duration 0~5{10, 30, 60, 300, 600,
									// NON_STOP_TIME}
	private byte bAlarmUploadFTP; // /< 报警录像的文件上传到ftp
	private byte bAlarmSaveToSD; // /< 报警录像的文件保存到sd卡
	private byte bSetFTPSMTP; // /< 为1表示设置FTP参数，为2表示设置SMTP参数
	private byte servier_ip[]; // /< FTP or SMTP server address
	private byte username[]; // /< FTP or SMTP login username
	private byte password[]; // /< FTP or SMTP login password
	private int uPort; // /< FTP or SMTP

	// my51c/
	private byte szBindAccont[]; // 绑定用户名
	private byte szDevSAddr[]; // 设备服务器地址或域名
	private int uDevSPort; // 设备服务器端口

	private byte szSMTPReceiver[]; // 接收邮件邮箱
	private byte motionenable; // /< motion detection enable
	private byte motioncenable; // /< customized sensitivity enable
	private byte motionlevel; // /< predefined sensitivity level
	private byte motioncvalue; // /< customized sensitivity value
	private byte motionblock[]; // /< motion detection block data
	private byte bDeviceRest; // / 设备复位命令为1表示复位，为2表示重启设备
	private byte bEnableEmailRcv; // / 开启报警邮件的接收
	private byte bAttachmentType; // / 设置邮件附件的类型 0->avi 1->jpeg 2->不带附件
	//
	private byte ntp_timezone; // / 设置系统时区，0-23 详细定义看下面的注释，
								// 最高位可以用来设置夏令时，默认自动设置夏令时
	private int nYear; // /< 当前年份.
	private byte nMon; // /< Mounth from 1 to 12. 修改时间时请先将月份赋值好，
						// 再将月份最高位设置为1(nMon|0x80)
	private byte nDay; // /< Second from 1 to 31.
	private byte nHour; // /< Hour from 0 to 23.
	private byte nMin; // /< Minute from 0 to 59.
	private byte nSec; // /< Second from 0 to 59.

	private byte nSdinsert; // /< SD card inserted，值为3表示sd卡可正常使用
	private byte bSchedulesUploadFTP; // /< Schedule录像的文件上传到ftp
	private byte bSchedulesSaveToSD; // /< Schedule录像文件保存到sd卡，最高位为1表示录像覆盖

	Schedule aSchedules[]; // /< schedule data

	// private byte szRevsered2[];

	public DeviceLocalInfo()
	{
		szPacketFlag = new byte[24]; // 标识字符
		szDeviceName = new byte[20]; // 设备名称
		szDeviceType = new byte[24]; // 设备类型
		szDeviceIP = new byte[16]; // 设备IP
		szDeviceMasK = new byte[16]; // 设备子网掩码
		szDeviceGateWay = new byte[16]; // 设备网关
		szMultiAddr = new byte[16]; // 设备多播地址
		szMacAddr_LAN = new byte[8]; // 设备MAC 地址
		szMacAddr_WIFI = new byte[12]; // 设备MAC 地址	
//		nEnableDeviceDHCP = Utils.ntohi(byteBuf.getInt()); // 设备DHCP
		szRevsered0 =  new byte[12]; // 
		szDNS0 = new byte[16]; // 设备DNS地址
		szDNS1 = new byte[16]; // DNS地址暂没用
		szUserName = new byte[16]; // 用户名
		szPwd = new byte[16]; // 密码
		szCameraVer = new byte[8]; // 软件版本
		szWanServerIP = new byte[24]; // 广域网IP
		szServerPort = new byte[8]; // 广域网端口
		szCamSerial = new byte[64]; // 设备序列号
		szWiFiIP = new byte[20]; // WiFi的IP
		szWiFiSSID = new byte[128]; // WiFi名称
		szWiFiPwd = new byte[68]; // WiFi密码
		szWiFiMasK = new byte[16]; // WiFi的子网掩码
		szWiFiGateWay = new byte[16]; // WiFi的网关
		szWiFiDNS0 = new byte[16]; // WiFi的DNS地址
		szWiFiDNS1 = new byte[16]; //
		szNewPwd = new byte[16]; // the new password
		szRevsered1 = new byte[46];

		setServier_ip(new byte[37]);
		setUsername(new byte[16]);
		setPassword(new byte[16]);
		szBindAccont = new byte[48]; // 绑定用户名
		szDevSAddr = new byte[48];
		setSzSMTPReceiver(new byte[64]);
		motionblock = new byte[4];
		aSchedules = new Schedule[8];
		for (int i = 0; i < 8; i++)
		{
			aSchedules[i] = new Schedule();
		}
		// szRevsered2 = new byte[204];
	}

	public DeviceLocalInfo(ByteBuffer byteBuf)
	{
		szPacketFlag = new byte[24]; // 标识字符
		szDeviceName = new byte[20]; // 设备名称
		szDeviceType = new byte[24]; // 设备类型
		szDeviceIP = new byte[16]; // 设备IP
		szDeviceMasK = new byte[16]; // 设备子网掩码
		szDeviceGateWay = new byte[16]; // 设备网关
		szMultiAddr = new byte[16]; // 设备多播地址
//by marshal
//		szMacAddr = new byte[32]; // 设备MAC 地址
		szMacAddr_LAN = new byte[8]; // 设备MAC 地址		
		szMacAddr_WIFI = new byte[8]; // 设备MAC 地址	
//		nEnableDeviceDHCP = Utils.ntohi(byteBuf.getInt()); // 设备DHCP
		szRevsered0 =  new byte[12]; // 
///end		
		szDNS0 = new byte[16]; // 设备DNS地址
		szDNS1 = new byte[16]; // DNS地址暂没用
		szUserName = new byte[16]; // 用户名
		szPwd = new byte[16]; // 密码
		szCameraVer = new byte[8]; // 软件版本
		szWanServerIP = new byte[24]; // 广域网IP
		szServerPort = new byte[8]; // 广域网端口
		szCamSerial = new byte[64]; // 设备序列号
		szWiFiIP = new byte[20]; // WiFi的IP
		szWiFiSSID = new byte[128]; // WiFi名称
		szWiFiPwd = new byte[68]; // WiFi密码
		szWiFiMasK = new byte[16]; // WiFi的子网掩码
		szWiFiGateWay = new byte[16]; // WiFi的网关
		szWiFiDNS0 = new byte[16]; // WiFi的DNS地址
		szWiFiDNS1 = new byte[16]; //
		szNewPwd = new byte[16]; // the new password
		szRevsered1 = new byte[46];

		setServier_ip(new byte[37]);
		setUsername(new byte[16]);
		setPassword(new byte[16]);
		szBindAccont = new byte[48]; // 绑定用户名
		szDevSAddr = new byte[48];
		setSzSMTPReceiver(new byte[64]);
		motionblock = new byte[4];

		// aSchedules = new Schedule[8];
		// szRevsered2 = new byte[204];

		nCmd = Utils.ntohi(byteBuf.getInt()); // 标识命令字
		byteBuf.get(szPacketFlag, 0, 24); // 标识字符
		byteBuf.get(szDeviceName, 0, 20); // 设备名称
		byteBuf.get(szDeviceType, 0, 24); // 设备类型
		nMaxChannel = Utils.ntohi(byteBuf.getInt()); // 最大通道数
		byteBuf.get(szDeviceIP, 0, 16); // 设备IP
		byteBuf.get(szDeviceMasK, 0, 16); // 设备子网掩码
		byteBuf.get(szDeviceGateWay, 0, 16); // 设备网关
		byteBuf.get(szMultiAddr, 0, 16); // 设备多播地址
//by marshal	
//		byteBuf.get(szMacAddr, 0, 32); // 设备MAC 地址
		byteBuf.get(szMacAddr_LAN, 0, 8); // 设备MAC 地址
		byteBuf.get(szMacAddr_WIFI, 0, 8); // 设备MAC 地址
		nEnableDeviceDHCP = Utils.ntohi(byteBuf.getInt()); // 设备DHCP, by marshal
		byteBuf.get(szRevsered0, 0, 12); // reserved
///end		

		byteBuf.get(szDNS0, 0, 16); // 设备DNS地址
		byteBuf.get(szDNS1, 0, 16); // DNS地址暂没用
		nMultiPort = Utils.ntohi(byteBuf.getInt()); // 多播端口
		nDataPort = Utils.ntohi(byteBuf.getInt()); // 数据端口
		nWebServerPort = Utils.ntohi(byteBuf.getInt()); // WEB 端口

		byteBuf.get(szUserName, 0, 16); // 用户名
		byteBuf.get(szPwd, 0, 16); // 密码
		byteBuf.get(szCameraVer, 0, 8); // 软件版本

		byteBuf.get(szWanServerIP, 0, 24); // 广域网IP
		byteBuf.get(szServerPort, 0, 8); // 广域网端口
		byteBuf.get(szCamSerial, 0, 64); // 设备序列号

		nEnableWiFiDHCP = Utils.ntohi(byteBuf.getInt()); // 是否允许WiFi的DHCP
		nEnableWiFi = Utils.ntohi(byteBuf.getInt()); // 是否允许WiFi
		nWiFiEncryMode = Utils.ntohi(byteBuf.getInt()); // WiFi加密模式
		byteBuf.get(szWiFiIP, 0, 20); // WiFi的IP
		byteBuf.get(szWiFiSSID, 0, 128); // WiFi名称
		byteBuf.get(szWiFiPwd, 0, 68); // WiFi密码, by marshal
//		nEnableDeviceDHCP = Utils.ntohi(byteBuf.getInt()); // 设备DHCP, by marshal
		byteBuf.get(szWiFiMasK, 0, 16); // WiFi的子网掩码
		byteBuf.get(szWiFiGateWay, 0, 16); // WiFi的网关
		byteBuf.get(szWiFiDNS0, 0, 16); // WiFi的DNS地址
		byteBuf.get(szWiFiDNS1, 0, 16); //

		uOfferSize = Utils.ntohi(byteBuf.getInt()); // 提供的视频分辨率
		uImageSize = Utils.ntohi(byteBuf.getInt()); // 当前视频分辨率
		uMirror = Utils.ntohi(byteBuf.getInt()); // 视频镜像
		uFlip = Utils.ntohi(byteBuf.getInt()); // 视频翻转
		uRequestStream = Utils.ntohi(byteBuf.getInt());//
		uBitrate1 = Utils.ntohi(byteBuf.getInt()); // 波特率
		uFramerate1 = Utils.ntohi(byteBuf.getInt()); // 帧率
		uBitrate2 = Utils.ntohi(byteBuf.getInt()); // 波特率
		uFramerate2 = Utils.ntohi(byteBuf.getInt()); // 帧率
		uImagesource = Utils.ntohi(byteBuf.getInt()); // 分辨率(NTSC/PAL)
		uChangePWD = Utils.ntohi(byteBuf.getInt()); // 1: need to change 0: not
													// to change
		byteBuf.get(szNewPwd, 0, 16); // the new password
		nDeviceNICType = Utils.ntohi(byteBuf.getInt()); // 0 wired NIC =
														// Utils.ntohi(byteBuf.getInt());1
														// wifi NIC
		uEnableAudio = Utils.ntohi(byteBuf.getInt()); // 是否开启音频
		byteBuf.get(szRevsered1, 0, 46);

		setnAlarmAudioPlay(byteBuf.get());
		nAlarmDuration = byteBuf.get();
		setbAlarmUploadFTP(byteBuf.get());
		setbAlarmSaveToSD(byteBuf.get());
		setbSetFTPSMTP(byteBuf.get());
		byteBuf.get(getServier_ip(), 0, 37);
		byteBuf.get(getUsername(), 0, 16);
		byteBuf.get(getPassword(), 0, 16);
		setuPort(Utils.ntohi(byteBuf.getInt()));

		byteBuf.get(szBindAccont, 0, 48); // 绑定用户名
		byteBuf.get(szDevSAddr, 0, 48);
		uDevSPort = Utils.ntohi(byteBuf.getInt());
		byteBuf.get(getSzSMTPReceiver(), 0, 64);
		setMotionenable(byteBuf.get());
		motioncenable = byteBuf.get();
		setMotionlevel(byteBuf.get());
		motioncvalue = byteBuf.get();
		byteBuf.get(motionblock, 0, 4);
		setbDeviceRest(byteBuf.get());
		setbEnableEmailRcv(byteBuf.get());
		setbAttachmentType(byteBuf.get());
		setNtp_timezone(byteBuf.get());
		setnYear(Utils.ntohi(byteBuf.getInt()));
		setnMon(byteBuf.get());
		setnDay(byteBuf.get());
		setnHour(byteBuf.get());
		setnMin(byteBuf.get());
		setnSec(byteBuf.get());
		setnSdinsert(byteBuf.get());
		setbSchedulesUploadFTP(byteBuf.get());
		setbSchedulesSaveToSD(byteBuf.get());

		aSchedules = new Schedule[8];
		for (int i = 0; i < 8; i++)
		{
			byte buf[] = new byte[8];
			byteBuf.get(buf, 0, 8);
			aSchedules[i] = new Schedule(buf);
		}
		// byteBuf.get(szRevsered2, 0, 204);
	}

	public ByteBuffer toByteBuffer()
	{
		ByteBuffer retBuf = ByteBuffer.allocate(1088);
		retBuf.putInt(Utils.htoni(nCmd)); // 标识命令字
		retBuf.put(szPacketFlag, 0, 24); // 标识字符
		retBuf.put(szDeviceName, 0, 20); // 设备名称
		retBuf.put(szDeviceType, 0, 24); // 设备类型
		retBuf.putInt(Utils.htoni(nMaxChannel)); // 最大通道数
		retBuf.put(szDeviceIP, 0, 16); // 设备IP
		retBuf.put(szDeviceMasK, 0, 16); // 设备子网掩码
		retBuf.put(szDeviceGateWay, 0, 16); // 设备网关
		retBuf.put(szMultiAddr, 0, 16); // 设备多播地址
//by marshal	
//		retBuf.put(szMacAddr, 0, 32); // 设备MAC 地址
		retBuf.put(szMacAddr_LAN, 0, 8); // 设备MAC 地址
		retBuf.put(szMacAddr_WIFI, 0, 8); // 设备MAC 地址
		retBuf.putInt(Utils.htoni(nEnableDeviceDHCP)); // 设备DHCP
		retBuf.put(szRevsered0, 0, 12); // reserved
///end		
		retBuf.put(szDNS0, 0, 16); // 设备DNS地址
		retBuf.put(szDNS1, 0, 16); // DNS地址暂没用
		retBuf.putInt(Utils.htoni(nMultiPort)); // 多播端口
		retBuf.putInt(Utils.htoni(nDataPort)); // 数据端口
		retBuf.putInt(Utils.htoni(nWebServerPort)); // WEB 端口

		retBuf.put(szUserName, 0, 16); // 用户名
		retBuf.put(szPwd, 0, 16); // 密码
		retBuf.put(szCameraVer, 0, 8); // 软件版本

		retBuf.put(szWanServerIP, 0, 24); // 广域网IP
		retBuf.put(szServerPort, 0, 8); // 广域网端口
		retBuf.put(szCamSerial, 0, 64); // 设备序列号

		retBuf.putInt(Utils.htoni(nEnableWiFiDHCP)); // 是否允许WiFi的DHCP
		retBuf.putInt(Utils.htoni(nEnableWiFi)); // 是否允许WiFi
		retBuf.putInt(Utils.htoni(nWiFiEncryMode)); // WiFi加密模式
		retBuf.put(szWiFiIP, 0, 20); // WiFi的IP
		retBuf.put(szWiFiSSID, 0, 128); // WiFi名称
		retBuf.put(szWiFiPwd, 0, 68); // WiFi密码
//		retBuf.putInt(Utils.htoni(nEnableDeviceDHCP)); // 设备DHCP
		retBuf.put(szWiFiMasK, 0, 16); // WiFi的子网掩码
		retBuf.put(szWiFiGateWay, 0, 16); // WiFi的网关
		retBuf.put(szWiFiDNS0, 0, 16); // WiFi的DNS地址
		retBuf.put(szWiFiDNS1, 0, 16); //

		retBuf.putInt(Utils.htoni(uOfferSize)); // 提供的视频分辨率
		retBuf.putInt(Utils.htoni(uImageSize)); // 当前视频分辨率
		retBuf.putInt(Utils.htoni(uMirror)); // 视频镜像
		retBuf.putInt(Utils.htoni(uFlip)); // 视频翻转
		retBuf.putInt(Utils.htoni(uRequestStream));//
		retBuf.putInt(Utils.htoni(uBitrate1)); // 波特率
		retBuf.putInt(Utils.htoni(uFramerate1)); // 帧率
		retBuf.putInt(Utils.htoni(uBitrate2)); // 波特率
		retBuf.putInt(Utils.htoni(uFramerate2)); // 帧率

		retBuf.putInt(Utils.htoni(uImagesource)); // 分辨率(NTSC/PAL)
		retBuf.putInt(Utils.htoni(uChangePWD)); // 1: need to change 0: not to
												// change
		retBuf.put(szNewPwd, 0, 16); // the new password
		retBuf.putInt(Utils.htoni(nDeviceNICType)); // 0 wired NIC);1 wifi NIC
		retBuf.putInt(Utils.htoni(uEnableAudio)); // 是否开启音频

		retBuf.put(szRevsered1, 0, 46);
		retBuf.put(getnAlarmAudioPlay());
		retBuf.put(nAlarmDuration);
		retBuf.put(getbAlarmUploadFTP());
		retBuf.put(getbAlarmSaveToSD());
		retBuf.put(getbSetFTPSMTP());
		retBuf.put(getServier_ip(), 0, 37);
		retBuf.put(getUsername(), 0, 16);
		retBuf.put(getPassword(), 0, 16);
		retBuf.putInt(Utils.htoni(getuPort()));

		retBuf.put(szBindAccont, 0, 48); // 绑定用户名
		// retBuf.put(szRevsered2, 0, 204);
		retBuf.put(szDevSAddr, 0, 48);

		retBuf.putInt(Utils.htoni(uDevSPort));
		retBuf.put(getSzSMTPReceiver(), 0, 64);

		retBuf.put(getMotionenable());
		retBuf.put(motioncenable);
		retBuf.put(getMotionlevel());
		retBuf.put(motioncvalue);
		retBuf.put(motionblock, 0, 4);
		retBuf.put(getbDeviceRest());
		retBuf.put(getbEnableEmailRcv());
		retBuf.put(getbAttachmentType());
		retBuf.put(getNtp_timezone());

		retBuf.putInt(Utils.htoni(getnYear()));
		retBuf.put(getnMon());
		retBuf.put(getnDay());
		retBuf.put(getnHour());
		retBuf.put(getnMin());
		retBuf.put(getnSec());
		retBuf.put(getnSdinsert());
		retBuf.put(getbSchedulesUploadFTP());
		retBuf.put(getbSchedulesSaveToSD());

		for (int i = 0; i < 8; i++)
		{
			retBuf.put(aSchedules[i].getScheduleBuffer(), 0, 8);
		}

		retBuf.flip();
		return retBuf;
	}

	protected String byteToString(byte[] src)
	{
		int len = 0;
		for (; len < src.length; len++)
		{
			if (src[len] == 0)
			{
				break;
			}
		}
		return new String(src, 0, len);
	}

	protected byte[] StringToByte(String str, int length)
	{
		byte retByte[] = new byte[length];
		byte strByte[] = str.getBytes();
		for (int i = 0; i < strByte.length && i < length; i++)
		{
			retByte[i] = strByte[i];
		}
		return retByte;
	}

	public String getPacketFlag()
	{ // 标识字符
		return byteToString(szPacketFlag);
	}

	public String getDeviceName()
	{ // 设备名称
		return byteToString(szDeviceName);
	}

	public String getDeviceType()
	{ // 设备类型
		return byteToString(szDeviceType);
	}

	public String getDeviceIP()
	{ // 设备IP
		return byteToString(szDeviceIP);
	}

	public String getDeviceMasK()
	{ // 设备子网掩码
		return byteToString(szDeviceMasK);
	}

	public String getDeviceGateWay()
	{ // 设备网关
		return byteToString(szDeviceGateWay);
	}

	public String getMultiAddr()
	{ // 设备多播地址
		return byteToString(szMultiAddr);
	}

	public String getMacAddr()
	{ // 设备MAC 地址
		return byteToString(szMacAddr_LAN);
	}

	public String getDNS0()
	{ // 设备DNS地址
		return byteToString(szDNS0);
	}

	public String getDNS1()
	{ // DNS地址暂没用
		return byteToString(szDNS1);
	}

	public String getUserName()
	{ // 用户名
		return byteToString(szUserName);
	}

	public String getPwd()
	{ // 密码
		return byteToString(szPwd);
	}

	public String getCameraVer()
	{ // 软件版本
		return byteToString(szCameraVer);
	}

	public String getWanServerIP()
	{ // 广域网IP
		return byteToString(szWanServerIP);
	}

	public String getServerPort()
	{ // 广域网端口
		return byteToString(szServerPort);
	}

	public String getCamSerial()
	{ // 设备序列号
		return byteToString(szCamSerial);
	}

	public String getWiFiIP()
	{ // WiFi的IP
		return byteToString(szWiFiIP);
	}

	public String getWiFiSSID()
	{ // WiFi名称
		return byteToString(szWiFiSSID);
	}

	public String getWiFiPwd()
	{ // WiFi密码
		return byteToString(szWiFiPwd);
	}

	public String getWiFiMasK()
	{ // WiFi的子网掩码
		return byteToString(szWiFiMasK);
	}

	public String getWiFiGateWay()
	{ // WiFi的网关
		return byteToString(szWiFiGateWay);
	}

	public String getWiFiDNS0()
	{ // WiFi的DNS地址
		return byteToString(szWiFiDNS0);
	}

	public String getWiFiDNS1()
	{ //
		return byteToString(szWiFiDNS1);
	}

	public String getNewPwd()
	{ // the new password
		return byteToString(szNewPwd);
	}

	public void setPacketFlag(String strValue)
	{ // 标识字符
		szPacketFlag = StringToByte(strValue, szPacketFlag.length);
	}

	public void setDeviceName(String strValue)
	{
		// 设备名称
		szDeviceName = StringToByte(strValue, szDeviceName.length);
	}

	public void setDeviceType(String strValue)
	{ // 设备类型
		szDeviceType = StringToByte(strValue, szDeviceType.length);
	}

	public void setDeviceIP(String strValue)
	{ // 设备IP
		szDeviceIP = StringToByte(strValue, szDeviceIP.length);
	}

	public void setDeviceMasK(String strValue)
	{ // 设备子网掩码
		szDeviceMasK = StringToByte(strValue, szDeviceMasK.length);
	}

	public void setDeviceGateWay(String strValue)
	{ // 设备网关
		szDeviceGateWay = StringToByte(strValue, szDeviceGateWay.length);
	}

	public void setMultiAddr(String strValue)
	{ // 设备多播地址
		szMultiAddr = StringToByte(strValue, szMultiAddr.length);
	}

	public void setMacAddr(String strValue)
	{ // 设备MAC 地址
		szMacAddr_LAN = StringToByte(strValue, szMacAddr_LAN.length);
	}

	public void setDNS0(String strValue)
	{ // 设备DNS地址
		szDNS0 = StringToByte(strValue, szDNS0.length);
	}

	public void setDNS1(String strValue)
	{ // DNS地址暂没用
		szDNS1 = StringToByte(strValue, szDNS1.length);
	}

	public void setUserName(String strValue)
	{ // 用户名
		szUserName = StringToByte(strValue, szUserName.length);
	}

	public void setPwd(String strValue)
	{ // 密码
		szPwd = StringToByte(strValue, szPwd.length);
	}

	public void setCameraVer(String strValue)
	{ // 软件版本
		szCameraVer = StringToByte(strValue, szCameraVer.length);
	}

	public void setWanServerIP(String strValue)
	{ // 广域网IP
		szWanServerIP = StringToByte(strValue, szWanServerIP.length);
	}

	public void setServerPort(String strValue)
	{ // 广域网端口
		szServerPort = StringToByte(strValue, szServerPort.length);
	}

	public void setCamSerial(String strValue)
	{ // 设备序列号
		szCamSerial = StringToByte(strValue, szCamSerial.length);
	}

	public void setWiFiIP(String strValue)
	{ // WiFi的IP
		szWiFiIP = StringToByte(strValue, szWiFiIP.length);
	}

	public void setWiFiSSID(String strValue)
	{ // WiFi名称
		szWiFiSSID = StringToByte(strValue, szWiFiSSID.length);
	}

	public void setWiFiPwd(String strValue)
	{ // WiFi密码
		szWiFiPwd = StringToByte(strValue, szWiFiPwd.length);
	}

	public void setWiFiMasK(String strValue)
	{ // WiFi的子网掩码
		szWiFiMasK = StringToByte(strValue, szWiFiMasK.length);
	}

	public void setWiFiGateWay(String strValue)
	{ // WiFi的网关
		szWiFiGateWay = StringToByte(strValue, szWiFiGateWay.length);
	}

	public void setWiFiDNS0(String strValue)
	{ // WiFi的DNS地址
		szWiFiDNS0 = StringToByte(strValue, szWiFiDNS0.length);
	}

	public void setWiFiDNS1(String strValue)
	{ //
		szWiFiDNS1 = StringToByte(strValue, szWiFiDNS1.length);
	}

	public void setNewPwd(String strValue)
	{ // the new password
		szNewPwd = StringToByte(strValue, szNewPwd.length);
	}

	public void setBindAccont(String strValue)
	{ // 绑定用户名
		szBindAccont = StringToByte(strValue, szBindAccont.length);
	}

	public int getCmd()
	{ // 标识命令字
		return nCmd;
	}

	public int getMaxChannel()
	{ // 最大通道数
		return nMaxChannel;
	}

	public int getMultiPort()
	{ // 多播端口
		return nMultiPort;
	}

	public int getDataPort()
	{ // 数据端口
		return nDataPort;
	}

	public int getWebServerPort()
	{ // WEB 端口
		return nWebServerPort;
	}

	public int getEnableWiFiDHCP()
	{ // 是否允许WiFi的DHCP
		return nEnableWiFiDHCP;
	}

	public int getEnableWiFi()
	{ // 是否允许WiFi
		return nEnableWiFi;
	}

	public int getWiFiEncryMode()
	{ // WiFi加密模式
		return nWiFiEncryMode;
	}

	public int getEnableDeviceDHCP()
	{ // 设备DHCP
		return nEnableDeviceDHCP;
	}

	public int getOfferSize()
	{ // 提供的视频分辨率
		return uOfferSize;
	}

	public int getImageSize()
	{ // 当前视频分辨率
		return uImageSize;
	}

	public int getMirror()
	{ // 视频镜像
		return uMirror;
	}

	public int getFlip()
	{ // 视频翻转
		return uFlip;
	}

	public int getRequestStream()
	{//
		return uRequestStream;
	}

	public int getBitrate1()
	{ // 波特率
		return uBitrate1;
	}

	public int getFramerate1()
	{ // 帧率
		return uFramerate1;
	}

	// 第二路码流;
	public int getBitrate2()
	{ // 波特率
		return uBitrate2;
	}

	public int getFramerate2()
	{ // 帧率
		return uFramerate2;
	}

	public int getImagesource()
	{ // 分辨率(NTSC/PAL)
		return uImagesource;
	}

	public int getChangePWD()
	{ // 1: need to change 0: not to change
		return uChangePWD;
	}

	public int getDeviceNICType()
	{ // 0 wired NIC(){1 wifi NIC
		return nDeviceNICType;
	}

	public int getEnableAudio()
	{ // 是否开启音频
		return uEnableAudio;
	}

	public void setCmd(int value)
	{ // 标识命令字
		nCmd = value;
	}

	public void setMaxChannel(int value)
	{ // 最大通道数
		nMaxChannel = value;
	}

	public void setMultiPort(int value)
	{ // 多播端口
		nMultiPort = value;
	}

	public void setDataPort(int value)
	{ // 数据端口
		nDataPort = value;
	}

	public void setWebServerPort(int value)
	{ // WEB 端口
		nWebServerPort = value;
	}

	public void setEnableWiFiDHCP(int value)
	{ // 是否允许WiFi的DHCP
		nEnableWiFiDHCP = value;
	}

	public void setEnableWiFi(int value)
	{ // 是否允许WiFi
		nEnableWiFi = value;
	}

	public void setWiFiEncryMode(int value)
	{ // WiFi加密模式
		nWiFiEncryMode = value;
	}

	public void setEnableDeviceDHCP(int value)
	{ // 设备DHCP
		nEnableDeviceDHCP = value;
	}

	public void setOfferSize(int value)
	{ // 提供的视频分辨率
		uOfferSize = value;
	}

	public void setImageSize(int value)
	{ // 当前视频分辨率
		uImageSize = value;
	}

	public void setMirror(int value)
	{ // 视频镜像
		uMirror = value;
	}

	public void setFlip(int value)
	{ // 视频翻转
		uFlip = value;
	}

	public void setRequestStream(int value)
	{//
		uRequestStream = value;
	}

	public void setBitrate1(int value)
	{ // 波特率
		uBitrate1 = value;
	}

	public void setFramerate1(int value)
	{ // 帧率
		uFramerate1 = value;
	}

	// 第二路码流 = value;
	public void setBitrate2(int value)
	{ // 波特率
		uBitrate2 = value;
	}

	public void setFramerate2(int value)
	{ // 帧率
		uFramerate2 = value;
	}

	public void setImagesource(int value)
	{ // 分辨率(NTSC/PAL)
		uImagesource = value;
	}

	public void setChangePWD(int value)
	{ // 1: need to change 0: not to change
		uChangePWD = value;
	}

	public void setDeviceNICType(int value)
	{ // 0 wired NIC() 1 wifi NIC
		nDeviceNICType = value;
	}

	public void setEnableAudio(int value)
	{ // 是否开启音频
		uEnableAudio = value;
	}

	/**
	 * @return the ntp_timezone
	 */
	public byte getNtp_timezone()
	{
		return (byte) (ntp_timezone & 0x7f);
	}

	/**
	 * @param ntp_timezone
	 *            the ntp_timezone to set
	 */
	public void setNtp_timezone(byte ntp_timezone)
	{
		this.ntp_timezone = (byte) (ntp_timezone | 0x80);
	}

	/**
	 * @return the nYear
	 */
	public int getnYear()
	{
		return nYear;
	}

	/**
	 * @param nYear
	 *            the nYear to set
	 */
	public void setnYear(int nYear)
	{
		this.nYear = nYear;
	}

	/**
	 * @return the nMon
	 */
	public byte getnMon()
	{
		return nMon;
	}

	/**
	 * @param nMon
	 *            the nMon to set
	 */
	public void setnMon(byte nMon)
	{
		this.nMon = nMon;
	}

	/**
	 * @return the nDay
	 */
	public byte getnDay()
	{
		return nDay;
	}

	/**
	 * @param nDay
	 *            the nDay to set
	 */
	public void setnDay(byte nDay)
	{
		this.nDay = nDay;
	}

	/**
	 * @return the nHour
	 */
	public byte getnHour()
	{
		return nHour;
	}

	/**
	 * @param nHour
	 *            the nHour to set
	 */
	public void setnHour(byte nHour)
	{
		this.nHour = nHour;
	}

	/**
	 * @return the nMin
	 */
	public byte getnMin()
	{
		return nMin;
	}

	/**
	 * @param nMin
	 *            the nMin to set
	 */
	public void setnMin(byte nMin)
	{
		this.nMin = nMin;
	}

	/**
	 * @return the nSec
	 */
	public byte getnSec()
	{
		return nSec;
	}

	/**
	 * @param nSec
	 *            the nSec to set
	 */
	public void setnSec(byte nSec)
	{
		this.nSec = nSec;
	}

	/**
	 * @return the nSdinsert
	 */
	public byte getnSdinsert()
	{
		return nSdinsert;
	}

	/**
	 * @param nSdinsert
	 *            the nSdinsert to set
	 */
	public void setnSdinsert(byte nSdinsert)
	{
		this.nSdinsert = nSdinsert;
	}

	/**
	 * @return the bSchedulesUploadFTP
	 */
	public byte getbSchedulesUploadFTP()
	{
		return bSchedulesUploadFTP;
	}

	/**
	 * @param bSchedulesUploadFTP
	 *            the bSchedulesUploadFTP to set
	 */
	public void setbSchedulesUploadFTP(byte bSchedulesUploadFTP)
	{
		this.bSchedulesUploadFTP = bSchedulesUploadFTP;
	}

	/**
	 * @return the bSchedulesSaveToSD
	 */
	public byte getbSchedulesSaveToSD()
	{
		return bSchedulesSaveToSD;
	}

	/**
	 * @param bSchedulesSaveToSD
	 *            the bSchedulesSaveToSD to set
	 */
	public void setbSchedulesSaveToSD(byte bSchedulesSaveToSD)
	{
		this.bSchedulesSaveToSD = bSchedulesSaveToSD;
	}

	/**
	 * @return the bDeviceRest
	 */
	public byte getbDeviceRest()
	{
		return bDeviceRest;
	}

	/**
	 * @param bDeviceRest
	 *            the bDeviceRest to set
	 */
	public void setbDeviceRest(byte bDeviceRest)
	{
		this.bDeviceRest = bDeviceRest;
	}

	/**
	 * @return the motionenable
	 */
	public byte getMotionenable()
	{
		return motionenable;
	}

	/**
	 * @param motionenable
	 *            the motionenable to set
	 */
	public void setMotionenable(byte motionenable)
	{
		this.motionenable = motionenable;
	}

	/**
	 * @return the nAlarmAudioPlay
	 */
	public byte getnAlarmAudioPlay()
	{
		return nAlarmAudioPlay;
	}

	/**
	 * @param nAlarmAudioPlay
	 *            the nAlarmAudioPlay to set
	 */
	public void setnAlarmAudioPlay(byte nAlarmAudioPlay)
	{
		this.nAlarmAudioPlay = nAlarmAudioPlay;
	}

	/**
	 * @return the bEnableEmailRcv
	 */
	public byte getbEnableEmailRcv()
	{
		return bEnableEmailRcv;
	}

	/**
	 * @param bEnableEmailRcv
	 *            the bEnableEmailRcv to set
	 */
	public void setbEnableEmailRcv(byte bEnableEmailRcv)
	{
		this.bEnableEmailRcv = bEnableEmailRcv;
	}

	/**
	 * @return the bAttachmentType
	 */
	public byte getbAttachmentType()
	{
		return bAttachmentType;
	}

	/**
	 * @param bAttachmentType
	 *            the bAttachmentType to set
	 */
	public void setbAttachmentType(byte bAttachmentType)
	{
		this.bAttachmentType = bAttachmentType;
	}

	/**
	 * @return the szSMTPReceiver
	 */
	public byte[] getSzSMTPReceiver()
	{
		return szSMTPReceiver;
	}

	/**
	 * @param szSMTPReceiver
	 *            the szSMTPReceiver to set
	 */
	public void setSzSMTPReceiver(byte szSMTPReceiver[])
	{
		this.szSMTPReceiver = szSMTPReceiver;
	}

	/**
	 * @return the bAlarmUploadFTP
	 */
	public byte getbAlarmUploadFTP()
	{
		return bAlarmUploadFTP;
	}

	/**
	 * @param bAlarmUploadFTP
	 *            the bAlarmUploadFTP to set
	 */
	public void setbAlarmUploadFTP(byte bAlarmUploadFTP)
	{
		this.bAlarmUploadFTP = bAlarmUploadFTP;
	}

	/**
	 * @return the bAlarmSaveToSD
	 */
	public byte getbAlarmSaveToSD()
	{
		return bAlarmSaveToSD;
	}

	/**
	 * @param bAlarmSaveToSD
	 *            the bAlarmSaveToSD to set
	 */
	public void setbAlarmSaveToSD(byte bAlarmSaveToSD)
	{
		this.bAlarmSaveToSD = bAlarmSaveToSD;
	}

	/**
	 * @return the bSetFTPSMTP
	 */
	public byte getbSetFTPSMTP()
	{
		return bSetFTPSMTP;
	}

	/**
	 * @param bSetFTPSMTP
	 *            the bSetFTPSMTP to set
	 */
	public void setbSetFTPSMTP(byte bSetFTPSMTP)
	{
		this.bSetFTPSMTP = bSetFTPSMTP;
	}

	/**
	 * @return the servier_ip
	 */
	public byte[] getServier_ip()
	{
		return servier_ip;
	}

	/**
	 * @param servier_ip
	 *            the servier_ip to set
	 */
	public void setServier_ip(byte servier_ip[])
	{
		this.servier_ip = servier_ip;
	}

	/**
	 * @return the username
	 */
	public byte[] getUsername()
	{
		return username;
	}

	/**
	 * @param username
	 *            the username to set
	 */
	public void setUsername(byte username[])
	{
		this.username = username;
	}

	/**
	 * @return the password
	 */
	public byte[] getPassword()
	{
		return password;
	}

	/**
	 * @param password
	 *            the password to set
	 */
	public void setPassword(byte password[])
	{
		this.password = password;
	}

	/**
	 * @return the uPort
	 */
	public int getuPort()
	{
		return uPort;
	}

	/**
	 * @param uPort
	 *            the uPort to set
	 */
	public void setuPort(int uPort)
	{
		this.uPort = uPort;
	}

	/**
	 * @return the motionlevel
	 */
	public byte getMotionlevel()
	{
		return motionlevel;
	}

	/**
	 * @param motionlevel
	 *            the motionlevel to set
	 */
	public void setMotionlevel(byte motionlevel)
	{
		this.motionlevel = motionlevel;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (!(obj instanceof DeviceLocalInfo))
		{
			return false;
		}
		DeviceLocalInfo o = (DeviceLocalInfo) obj;
		if (this == o)
		{
			return true;
		}

		this.setCmd(nCmd);// 不比较命令
		o.setCmd(nCmd); //

		ByteBuffer buffer = o.toByteBuffer();
		if (buffer.equals(this.toByteBuffer()))
		{
			return true;
		}
		return false;
	}

	@Override
	public Object clone()
	{
		DeviceLocalInfo o = null;
		try
		{
			o = (DeviceLocalInfo) super.clone();
			o.szPacketFlag = (byte[]) szPacketFlag.clone();// 其实也很简单^_^
			o.szDeviceName = (byte[]) szDeviceName.clone();
			o.szDeviceType = (byte[]) szDeviceType.clone();
			o.szDeviceIP = (byte[]) szDeviceIP.clone();
			o.szDeviceMasK = (byte[]) szDeviceMasK.clone();
			o.szDeviceGateWay = (byte[]) szDeviceGateWay.clone();
			o.szMultiAddr = (byte[]) szMultiAddr.clone();
			o.szMacAddr_LAN = (byte[]) szMacAddr_LAN.clone();
			o.szDNS0 = (byte[]) szDNS0.clone();
			o.szDNS1 = (byte[]) szDNS1.clone();
			o.szUserName = (byte[]) szUserName.clone();
			o.szPwd = (byte[]) szPwd.clone();
			o.szCameraVer = (byte[]) szCameraVer.clone();
			o.szWanServerIP = (byte[]) szWanServerIP.clone();
			o.szServerPort = (byte[]) szServerPort.clone();
			o.szCamSerial = (byte[]) szCamSerial.clone();
			o.szWiFiIP = (byte[]) szWiFiIP.clone();
			o.szWiFiSSID = (byte[]) szWiFiSSID.clone();
			o.szWiFiPwd = (byte[]) szWiFiPwd.clone();
			o.szWiFiMasK = (byte[]) szWiFiMasK.clone();
			o.szWiFiGateWay = (byte[]) szWiFiGateWay.clone();
			o.szWiFiDNS0 = (byte[]) szWiFiDNS0.clone();
			o.szWiFiDNS1 = (byte[]) szWiFiDNS1.clone();
			o.szNewPwd = (byte[]) szNewPwd.clone();
			o.szRevsered1 = (byte[]) szRevsered1.clone();
			o.setServier_ip((byte[]) getServier_ip().clone());
			o.setUsername((byte[]) getUsername().clone());
			o.setPassword((byte[]) getPassword().clone());
			o.szBindAccont = (byte[]) szBindAccont.clone();
			o.szDevSAddr = (byte[]) szDevSAddr.clone();
			o.setSzSMTPReceiver((byte[]) getSzSMTPReceiver().clone());
			o.motionblock = (byte[]) motionblock.clone();
			o.aSchedules = (Schedule[]) aSchedules.clone();

		} catch (CloneNotSupportedException e)
		{
			e.printStackTrace();
		}
		return o;
	}

}
